image: docker:latest
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  SPRING_PROFILES_ACTIVE: gitlab-ci

stages:
  - Compile
  - Build
  - Test
  - Package
  - Staging_QA
  - Staging_PROD
 
maven-jar-compile:
   image: maven:3-jdk-8
   stage: Compile
   script: "mvn package -B"
   artifacts:
     paths:
       - target/*.jar

docker-build:
   stage: Build
   script:
   - docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
   - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
   - docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"

 codequality:
   image: docker:stable
   stage: Test
   variables:
     DOCKER_DRIVER: overlay2
   allow_failure: true
   services:
     - docker:stable-dind
   script:
     - setup_docker
     - codeclimate
   artifacts:
     paths: [codeclimate.json]

dependency_scanning:
   image: docker:stable
   stage: Test
   variables:
     DOCKER_DRIVER: overlay2
   allow_failure: true
   services:
     - docker:stable-dind
   script:
     - setup_docker
     - dependency_scanning
   artifacts:
     paths: [gl-dependency-scanning-report.json]

#Static application security testing (SAST) is a set of technologies designed to analyze application source code, 
# byte code and binaries for coding and design conditions that are indicative of security vulnerabilities. 
# SAST solutions analyze an application from the “inside out” in a nonrunning state.

# SAST on program code level
# sast:
#    image: docker:stable
#    stage: Test
#    variables:
#      DOCKER_DRIVER: overlay2
#    allow_failure: true
#    services:
#      - docker:stable-dind
#    script:
#      - setup_docker
#      - sast
#    artifacts:
#      paths: [gl-sast-report.json]


# # SAST on container level
# sast:container:
#    image: docker:stable
#    stage: Test
#    variables:
#      DOCKER_DRIVER: overlay2
#    allow_failure: true
#    services:
#      - docker:stable-dind
#    script:
#      - setup_docker
#      - sast_container
#    artifacts:
#      paths: [gl-sast-container-report.json]


docker-package:
   stage: Package
   script: 
   - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
   - docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
   - docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" registry.gitlab.com/rapherd/sample-web-app
   - docker push registry.gitlab.com/rapherd/sample-web-app

k8s-qa-deploy-prepare:
  image: raphaelherding/k8s-bootstrap:v1.3
  stage: Staging_QA
  environment: QA
  script:
  - echo "$k8s_config" > config
  - kubectl --kubeconfig config apply -f deployment/qa/namespace.yaml
  - deploy_qa_secrets_and_service_accounts 'petclinic-qa'
  - kubectl --kubeconfig config apply -f deployment/qa/deployment.yaml
  - kubectl --kubeconfig config apply -f deployment/qa/service.yaml
      
k8s-production-deploy-prepare:
  image: raphaelherding/k8s-bootstrap:v1.3
  stage: Staging_PROD
  environment: PROD
  script:
  - echo "$k8s_config" > config
  - kubectl --kubeconfig config apply -f deployment/prod/namespace.yaml
  - deploy_prod_secrets_and_service_accounts 'petclinic'
  - kubectl --kubeconfig config apply -f deployment/prod/deployment.yaml
  - kubectl --kubeconfig config apply -f deployment/prod/service.yaml
  only:
    - master
  when: manual
      