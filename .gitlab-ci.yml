image: docker:latest
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  SPRING_PROFILES_ACTIVE: gitlab-ci

stages:
#  - compile
#  - build
 # - test
 # - package
  - QA_Deploy
  
# maven-jar-compile:
#   image: maven:3-jdk-8
#   stage: compile
#   script: "mvn package -B"
#   artifacts:
#     paths:
#       - target/*.jar

# docker-build:
#   stage: build
#   script:
#   - docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
#   - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#   - docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"


# codequality:
#   image: docker:stable
#   stage: test
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - setup_docker
#     - codeclimate
#   artifacts:
#     paths: [codeclimate.json]

# dependency_scanning:
#   image: docker:stable
#   stage: test
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - setup_docker
#     - dependency_scanning
#   artifacts:
#     paths: [gl-dependency-scanning-report.json]

#Static application security testing (SAST) is a set of technologies designed to analyze application source code, 
# byte code and binaries for coding and design conditions that are indicative of security vulnerabilities. 
# SAST solutions analyze an application from the “inside out” in a nonrunning state.

# SAST on program code level
# sast:
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - setup_docker
#     - sast
#   artifacts:
#     paths: [gl-sast-report.json]


# SAST on container level
# sast:container:
#   image: docker:stable
#   stage: test
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - setup_docker
#     - sast_container
#   artifacts:
#     paths: [gl-sast-container-report.json]


# docker-package:
#   stage: package
#   script:
#   - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#   - docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
#   - docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" registry.gitlab.com/rapherd/sample-web-app
#   - docker push registry.gitlab.com/rapherd/sample-web-app

k8s-qa-deploy-prepare:
  image: raphaelherding/k8s-bootstrap:v1.3
  stage: QA_Deploy
  environment: QA
  script:
  - deploy_application
  #- echo "$k8s_config" > config
  #- kubectl --kubeconfig config apply -f deployment/qa/namespace.yaml
  #- deploy_qa_secrets_and_service_accounts 'petclinic-qa'
  #- kubectl --kubeconfig config apply -f deployment/qa/deployment.yaml
  #- kubectl --kubeconfig config apply -f deployment/qa/service.yaml
      
# k8s-qa-deploy-application:
#   image: raphaelherding/k8s-bootstrap:v1.3
#   stage: QA_Deploy
#   environment: QA
#   script:
#   - echo "$k8s_config" > config
#   - kubectl --kubeconfig config apply -f deployment/qa/namespace.yaml
#   - kubectl --kubeconfig config apply -f deployment/qa/deployment.yaml
#   - kubectl --kubeconfig config apply -f deployment/qa/service.yaml


# k8s-production-deploy-application:  
#   image: raphaelherding/k8s-bootstrap:v1.3
#   stage: PROD_Deploy
#   environment: PROD
#   script:
#   - echo "$k8s_config" > config
#   - kubectl --kubeconfig config apply -f deployment/prod/namespace.yaml
#   - kubectl --kubeconfig config -n $ns apply -f deployment/prod/deployment.yaml
#   - kubectl --kubeconfig config -n $ns apply -f deployment/prod/service.yaml


# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  auto_database_url=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${CI_ENVIRONMENT_SLUG}-postgres:5432/${POSTGRES_DB}
  export DATABASE_URL=${DATABASE_URL-$auto_database_url}
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export KUBERNETES_NS='petclinic'
  export TILLER_NAMESPACE=$KUBE_NAMESPACE
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable" for Security Products
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')

  function sast_container() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
      #docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi

    docker run -d --name db arminc/clair-db:latest
    docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
    apk add -U wget ca-certificates
    docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    #docker pull registry.gitlab.com/rapherd/sample-web-app
    wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    mv clair-scanner_linux_amd64 clair-scanner
    chmod +x clair-scanner
    touch clair-whitelist.yml
    retries=0
    echo "Waiting for clair daemon to start"
    while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 15 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-sast-container-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
  }

  function codeclimate() {
    docker run --env SOURCE_CODE="$PWD" \
               --volume "$PWD":/code \
               --volume /var/run/docker.sock:/var/run/docker.sock \
               "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  }

  function sast() {
    case "$CI_SERVER_VERSION" in
      *-ee)

        # Deprecation notice for CONFIDENCE_LEVEL variable
        if [ -z "$SAST_CONFIDENCE_LEVEL" -a "$CONFIDENCE_LEVEL" ]; then
          SAST_CONFIDENCE_LEVEL="$CONFIDENCE_LEVEL"
          echo "WARNING: CONFIDENCE_LEVEL is deprecated and MUST be replaced with SAST_CONFIDENCE_LEVEL"
        fi

        docker run --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}" \
                   --volume "$PWD:/code" \
                   --volume /var/run/docker.sock:/var/run/docker.sock \
                   "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
        ;;
      *)
        echo "GitLab EE is required"
        ;;
    esac
  }

  function dependency_scanning() {
    case "$CI_SERVER_VERSION" in
      *-ee)
        docker run --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}" \
                   --volume "$PWD:/code" \
                   --volume /var/run/docker.sock:/var/run/docker.sock \
                   "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
        ;;
      *)
        echo "GitLab EE is required"
        ;;
    esac
  }
  
  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function deploy_qa_secrets_and_service_accounts() {
      ns=$1
      # create pull secret for getting readonly access to docker registry in gitlab
      string=$(kubectl --kubeconfig config -n $ns get secrets -o json)
      if [[ $string != *"gitlab-petclinic-pull-token-qa"* ]]; then
        kubectl --kubeconfig config -n $ns create secret docker-registry gitlab-petclinic-pull-token-qa --docker-server=registry.gitlab.com --docker-username=$docker_pull_token_user --docker-password=$docker_pull_token_password --docker-email=mail@mail.com 2>/dev/null
      fi
      # create service account for the application
      kubectl --kubeconfig config -n $ns apply -f deployment/qa/service-account.yaml
  }

  function deploy_prod_secrets_and_service_accounts() {
      ns=$1
      # create pull secret for getting readonly access to docker registry in gitlab
      string=$(kubectl --kubeconfig config -n $ns get secrets -o json)
      if [[ $string != *"gitlab-petclinic-pull-token-prod"* ]]; then
        kubectl --kubeconfig config -n $ns create secret docker-registry gitlab-petclinic-pull-token-prod --docker-server=registry.gitlab.com --docker-username=$docker_pull_token_user --docker-password=$docker_pull_token_password --docker-email=mail@mail.com 2>/dev/null
      fi
      # create service account for the application
      kubectl --kubeconfig config -n $ns apply -f deployment/prod/service-account.yaml
  }
  function deploy_application() {
    echo 'container id is'
    echo $CI_CONTAINER_NAME
   }
  #  function deploy_application() {
  #     ns=$1
  #     # create or update deployment of  the application
  #     kubectl --kubeconfig config -n $ns apply -f deployment/deployment.yaml
  #     # create or update service
  #     kubectl --kubeconfig config -n $ns apply -f deployment/service.yaml
  # }

before_script:
  - *auto_devops